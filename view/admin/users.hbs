<style>
  .custom-modal {
    background: rgba(0,0,0,0.5);
}

.custom-modal .modal-dialog {
    z-index: 1055;
    position: relative;
}

body.modal-open {
    overflow: initial !important;
    padding-right: 0 !important;
}

.modal-backdrop {
    display: none !important;
}
</style>

<div class="container-fluid mt-2">
    <h1>Users Management</h1>

<table class="table">
  <thead class="thead-dark">
    <tr>
      <th scope="col">#</th>
      <th scope="col">Name</th>
      <th scope="col">Role</th>
      <th>Change Role</th>
      <th scope="col">Status</th>
      <th scope="col">Request</th>
      <th scope="col">Renew Subscription</th>
      <th scope="col">Assign Categories</th>
      <th scope="col">&nbsp;</th>
      
    </tr>
  </thead>
  <tbody>
    {{#if list}}
      {{#each list}}
        <tr class="{{#if request}}table-warning{{/if}}">
        <th scope="row">{{this.id}}</th>
        <td>{{this.name}} {{#if (eq this.role 'writer')}} <span style="color:rgb(101, 78, 10)">( {{this.pen_name}} )</span>{{/if}}</td>
        <td>{{this.role}}</td>
        
       <td>
        <select class="form-select form-control" onchange="updateRole({{this.id}}, this.value)">
            <option value="">Select role</option>
            <option value="admin" {{#if (eq this.role 'admin')}}selected{{/if}}>Admin</option>
            <option value="writer" {{#if (eq this.role 'writer')}}selected{{/if}}>Writer</option>
            <option value="editor" {{#if (eq this.role 'editor')}}selected{{/if}}>Editor</option>
            <option value="user" {{#if (eq this.role 'user')}}selected{{/if}}>User</option>
        </select>
    </td>

        {{#if (isSubscriptionActive this.subscription_expiry)}}
            <td class="text-success">Active ({{getRemainingDays this.subscription_expiry }}) </td>
        {{else}}
            <td class="text-danger">Expired</td>
            
        {{/if}}

        {{#if request}}
        <td style="color:red">Requesting</td>
        {{else}}
        <td></td>
        {{/if}}
        {{#if (eq this.role 'user')}}
        <td>
          <select class="form-control subscription-select" data-user-id="{{id}}">
              <option value="">Select duration</option>
              <option value="1">1 day</option>
              <option value="7">7 days</option>
              <option value="14">14 days</option>
              <option value="28">28 days</option>
              <option value="0">Cancel</option>
          </select>
        </td>
          {{else}}
        <td></td>
        {{/if}}
         {{#if (eq this.role 'editor')}}
        <td>
          <button class="btn btn-outline-dark" onClick="openTextModal({{id}})">Update</button>
        </td>
        {{/if}}
        
      </tr>
      {{/each}}
    {{else}}
      <tr>

        <td colspan="6" class="text-center">No data available</td>
      </tr>
    {{/if}}
  </tbody>
</table>
<div class="modal fade custom-modal" id="modal_text" data-bs-backdrop="static" tabindex="-1" aria-labelledby="text-modal-title" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="text-modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="codes-container">
                <!-- Codes will be inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
</div>

<script nonce="{{nonce}}">
document.addEventListener('DOMContentLoaded', function() {
    // Subscription select handlers
    const subscriptionSelects = document.querySelectorAll('.subscription-select');
    subscriptionSelects.forEach(select => {
        select.addEventListener('change', handleSubscriptionChange);
    });
});

async function handleSubscriptionChange() {
    const userId = this.getAttribute('data-user-id');
    const days = this.value;
    if (!days) return;
    
    try {
        const response = await fetch('/article/subscription/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userId: userId,
                days: parseInt(days)
            })
        });

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Subscription updated successfully'
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error('Failed to update subscription');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update subscription'
        });
    }
}

async function openTextModal(id) {
    const modalEl = document.getElementById('modal_text');
    const modal = new bootstrap.Modal(modalEl);
    const codesContainer = document.getElementById('codes-container');
    
    try {
        // Get assigned categories
        const response = await fetch(`/admin/getCate?id=${id}`);
        const codes = await response.json();
        
        // Get unassigned categories
        const unassignedResponse = await fetch(`/admin/getUnassignedCate?id=${id}`);
        const unassignedCodes = await unassignedResponse.json();
        
        codesContainer.innerHTML = `
            <div>
                <h5 class="text-success mb-2">Assigned Categories</h5>
                <div class="assigned-categories mb-3"></div>
            </div>
            <hr>
            <div>
                <h5 class="text-secondary mb-2">Available Categories</h5>
                <div class="unassigned-categories"></div>
            </div>
        `;
        
        const assignedContainer = codesContainer.querySelector('.assigned-categories');
        const unassignedContainer = codesContainer.querySelector('.unassigned-categories');
        
        // Render assigned categories
        codes.forEach(code => {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = 'btn btn-success m-1';
            button.textContent = code.category_name;
            button.setAttribute('data-code', code.category_id);
            
            button.addEventListener('click', async () => {
        // Get userId from URL or data attribute
        const userId = new URLSearchParams(window.location.search).get('id');
        console.log('userId:', userId, 'categoryId:', code.category_id);

        const result = await Swal.fire({
            title: 'Are you sure?',
            text: `Do you want to remove category "${code.category_name}"?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/admin/removeCate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                       id:code.id
                    })
                });

                if (!response.ok) throw new Error('Network response was not ok');
                
                Swal.fire('Deleted!', 'Category has been removed.', 'success')
                    .then(() => button.remove());
            } catch (error) {
                console.error('Error:', error);
                Swal.fire('Error!', 'Failed to remove category.', 'error');
            }
        }
    });
            
            assignedContainer.appendChild(button);
        });
        
        // Render unassigned categories
        unassignedCodes.forEach(code => {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = 'btn btn-secondary m-1';
            button.textContent = code.name;
            button.setAttribute('data-code', code.id);
            
            // Add handler
            button.addEventListener('click', async () => {
                const result = await Swal.fire({
                    title: 'Add Category',
                    text: `Do you want to add "${code.name}" category?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes, add it!'
                });
                
                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/admin/addCate', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                userId: id,
                                categoryId: code.id
                            })
                        });
                        
                        if (response.ok) {
                            Swal.fire('Added!', 'Category has been added.', 'success')
                                .then(() => {
                                    button.remove();
                                    openTextModal(id); // Refresh modal
                                });
                        }
                    } catch (error) {
                        Swal.fire('Error!', 'Failed to add category.', 'error');
                    }
                }
            });
            
            unassignedContainer.appendChild(button);
        });
        
        modal.show();
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error!', 'Failed to load categories.', 'error');
    }
}
        
async function updateRole(userId, newRole) {
    try {
        const response = await fetch('/admin/updateRole', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                userId: userId,
                role: newRole
            })
        });

        if (response.ok) {
            location.reload();
        } else {
            alert('Failed to update role');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating role');
    }
}

async function saveTextChange() {
    const newValue = document.getElementById('text-input').value.trim();
    if (!newValue) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please enter a value'
        });
        return;
    }        
}
</script>
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>