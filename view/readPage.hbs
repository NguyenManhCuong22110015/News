<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Main Page</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.2/dist/sweetalert2.min.css">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.2/dist/sweetalert2.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

  <style>
 .sidebar {
    height: 100%;
    width: 50px;
    position: sticky;
    top: 0;
    background-color: #f8f9fa;
    border-right: 1px solid #dee2e6;
    padding-top: 100px;
}
.sidebar i.bi {
    font-size: 24px;
    
    }
.sidebar i:hover {
    color: #d32710;
    cursor: pointer;
}
.content-with-sidebar {
    display: flex;
    max-width: 1400px;  
    margin: 0 auto;
    padding: 15px;
}

.main-content {
    flex: 1;
    padding-left: 20px;
}

@media (max-width: 768px) {
    .sidebar {
        display: none;
    }
    
    .sidebar.active {
        display: block;
        width: 50px;
        position: fixed;
        z-index: 1000;
        height: 100vh;
    }

    .main-content {
        padding-left: 0;
    }
}

    /* Chatbot button */
    .chat-button {
      position: fixed;
      bottom: 80px;
      right: 20px;
      background-color: #055a1b;
      color: white;
      border: none;
      border-radius: 50%;
      padding: 15px;
      font-size: 24px;
      cursor: pointer;
      z-index: 1000;
    }

    /* Chatbot container */
    .chat-container {
      position: fixed;
      bottom: 80px;
      right: 100px;
      width: 300px;
      height: auto;
      background-color: white;
      border: 2px solid #007bff;
      border-radius: 10px;
      display: none;
      flex-direction: column;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      z-index: 999;
      margin-bottom: 5px;
    }

    /* Chat messages */
    .chat-messages {
      padding: 10px;
      overflow-y: auto;
      flex-grow: 1;
      height: 65vh;
      
      
      border-radius: 5px;
      background-color: #f9f9f9;
      font-size: 14px;
    }

    /* Chat input container */
    .chat-input-container {
      display: flex;
      padding: 10px;
      border-top: 1px solid #ddd;
    }

    .chat-input {
      flex-grow: 1;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-right: 10px;
    }

    .chat-send {
      background-color: #b74508;
      color: white;
      border: none;
      border-radius: 5px;
      padding: 10px;
      cursor: pointer;
    }

    .chat-send:hover {
      background-color: #0056b3;
    }

    /* Add some style to distinguish user and bot messages */
    .user-message {
        
      margin-bottom: 10px;
      font-weight: bold;
      color: #007bff;
    }

    .bot-message {
      margin-bottom: 10px;
      font-weight: normal;
      color: #333;
    }

.main-container {
    width: 100%;
    max-width: 1400px;  /* Add max-width for container behavior */
    margin: 0 auto;     /* Center the container */
    padding-right: 15px; /* Standard Bootstrap padding */
    padding-left: 15px;
    box-sizing: border-box; /* Include padding in width calculation */
}
.premium-container {
  width: 100%;
  margin: 10px 0;
}

.premium-wrapper {
  max-width: 100%;
  padding: 5px 0;
}

.premium-badge {
  font-size: 12px !important;
}

.download-btn {
  margin-left: 10px;
}

@media (min-width: 768px) {
    .main-container {
        padding-right: 30px;
        padding-left: 30px;
    }
}
.article-content {
    max-width: 100%;
    overflow-x: hidden;
}

.article-content img {
    max-width: 100%;
    height: auto;
}

.content-wrapper {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 15px;
}
.scroll-to-top {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #007bff;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: none;
  cursor: pointer;
  display: none;
  z-index: 999;
  transition: all 0.3s ease;
}

.scroll-to-top:hover {
  background: #0056b3;
  transform: translateY(-3px);
}
</style>
</head>
<body>


<div class="content-with-sidebar">

 <div class="sidebar" id="sidebar">
    <div class="d-flex justify-content-center">
      <i class="bi bi-heart"></i>
    </div>
     <div class="d-flex justify-content-center mb-3">
      <span>{{article.likes}}</span>
    </div>
    <div class="d-flex justify-content-center">
          <i class="bi bi-chat"></i>

    </div>
     <div class="d-flex justify-content-center mb-3">
      <span>{{num_cmt}}</span>
    </div>
    <div class="d-flex justify-content-center mb-3">
      <i class="bi bi-bookmark"></i>
    </div>
     <div class="d-flex justify-content-center">
     <i class="bi bi-three-dots"></i>
    </div>
</div>
<div class="main-container mt-5 ">
 

  <div class=" mt-5 mb-3">
    <b><a href="/">Home</a></b> / 
     <b><a href="/article/byCat?id={{this.article.category_id}}">{{this.main_cat}}</a></b> /
    
  </div>
  
  <div class="row">
    <!-- Article Main Section on the left (occupy 8 columns) -->
    <div class="col-lg-9">
      <h1>{{this.article.title}}</h1>
      {{#if this.tags}}
      <div class="tags">
        {{#each this.tags}}
        <a class="" href="/article/byTag?tag={{id}}" >#{{name}}</a>
        {{/each}}
      </div>
      {{/if}}
      {{#if authUser}}
      <div class="d-flex justify-content-between align-items-center">
        <p></p>
        <a class="btn btn-primary download-btn" href="/subscriber/download/{{this.article.id}}">
          <i class="bi bi-download"></i>
        </a>
     </div>
      {{/if}}
      <p class="d-flex align-items-center"><span>By</span>  <span class="ms-2 mt-5" style="text-decoration:underline" >{{#if author.pen_name}}{{ author.pen_name}}{{else}}  Anonymous{{/if}}</span></p>      
      <div class="article-info">
        
        <p class="read-time">
            <i class="fas fa-clock"></i> 
        </p>
        <p class="updated-time">{{formatDate this.article.updated_at}}</p>
      </div>
      <div class="social-icons">
        <a href="#" class="social-icon"><i class="fab fa-facebook-f"></i></a>
        <a href="#" class="social-icon"><i class="fa-brands fa-twitter"></i></a>
        <a href="#" class="social-icon"><i class="fas fa-envelope"></i></a>
        <a href="#" class="social-icon"><i class="fas fa-link"></i></a>
      </div>
      <div class="article-content">
        {{{this.article.content}}}
      </div>
      
    </div>

    <!-- Latest News Section on the right (occupy 4 columns) -->
    <div class="col-lg-3">
      <h5 class="text mb-4">| Latest News</h5>
      <div class="card">
        
        <ul class="list-group list-group-flush">
          {{#if empty}}
          <li class="list-group-item">Không có dữ liệu.</li>
          {{else}}
          {{#each this.articlesSameCate}}
        <a href="{{#if is_premium}}/read/premium{{else}}/read{{/if}}?id={{id}}" style="text-decoration-thickness: 1px;color: inherit;">      
          <li class="list-group-item ">
            <div class="d-flex align-items-center" >
              <img src={{extractFirstImage content}} class="mr-3" alt="Story 1">
              <p style="font-size:12px" class="short-description">{{title}}</p>
            </div>
            <p class="updated-time">  Updated {{formatDate updated_at}}</p>
             <p class="updated-time" style="color: red; font-size:15px" >{{category_name}}</p>
          </li>
          </a>
          {{/each}}
          {{/if}}
         
        </ul>
      </div>
    </div>


  
<div class="container comment-container mt-5 p-4 border rounded bg-light">
  <div class="d-flex justify-content-between align-items-center pb-3 border-bottom">
    <h4 class="fw-bold text-primary">Comments</h4>
    <span class="badge bg-primary text-white" id="commentCount">{{this.num_cmt}} Comments</span>
  </div>

  {{#if this.num_cmt}}
  <div id="commentsSection">
    {{#each this.comments}}
    <div class="comment-box second d-flex p-3 rounded mb-3 comment-item">
      <img src="/imgs/user_img.jpg" class="rounded-circle me-3 p-1" width="50" height="50" alt="avatar">
      <div class="w-100 ms-3">
        <div class="d-flex justify-content-between align-items-center">
          <h6 class="text2 mb-0 fw-bold">{{#if user_name}}{{user_name}}{{else}}Unknown{{/if}}</h6>
          <span class="text-muted small">{{formatDate created_at}}</span>
        </div>
        <p class="text1 mb-1">{{content}}</p>
        <div class="d-flex align-items-center">
          <i class="fa fa-thumbs-o-up text-success me-1"></i>
        </div>
      </div>
    </div>
    {{/each}}
  </div>

  <nav aria-label="Comment pagination" class="mt-4">
    <ul class="pagination justify-content-center" id="pagination"></ul>
  </nav>
  {{else}}
  <div class="text-center mt-4">
    <p>No comments yet</p>
  </div>
  {{/if}}
     
  </div>

  {{#if auth}}
        <div class="main-container d-flex align-items-center mt-4 mb-5">
            <input type="text" id="noteInput" name="text" placeholder="Write a comment..." class="form-control addtxt me-2 rounded-pill">
            <button id="postButton" class="btn btn-primary rounded-pill">Post</button>
        </div>
    {{else}}
        <div class="text-center mt-5 mb-5">
            <p>Please login to comment</p>
            <a href="/login" class="btn btn-primary rounded-pill">Login to Comment</a>
        </div>
    {{/if}}
</div>
<!-- Footer -->

<button id="scrollToTop" class="scroll-to-top d-none">
  <i class="fas fa-arrow-up"></i>
</button>
   <button class="chat-button" id="chatButton">
    <i class="bi bi-robot"></i>
  </button>

  <!-- Chatbot container -->
  <div class="chat-container" id="chatContainer">
    <div class="chat-messages" id="chatMessages">
      <!-- Messages will appear here -->
    </div>
    <div class="chat-input-container">
      <input type="text" class="chat-input" id="chatInput" placeholder="Type a message..." />
      <button class="chat-send" id="sendMessage">Send</button>
    </div>
  </div>

  </div>
</div>
</div>

<script>
document.getElementById('sidebarToggle')?.addEventListener('click', function() {
    document.getElementById('sidebar').classList.toggle('active');
});
document.addEventListener('DOMContentLoaded', function () {
    const COMMENTS_PER_PAGE = 5; // Số lượng bình luận mỗi trang
    const comments = document.querySelectorAll('.comment-item'); // Tất cả bình luận
    const pagination = document.getElementById('pagination'); // Container của phân trang
    const totalPages = Math.ceil(comments.length / COMMENTS_PER_PAGE); // Tổng số trang

    // Hàm hiển thị bình luận theo trang
    function showCommentsPage(page) {
        const start = (page - 1) * COMMENTS_PER_PAGE;
        const end = start + COMMENTS_PER_PAGE;

       comments.forEach((comment, index) => {
    if (index >= start && index < end) {
        comment.setAttribute('style', 'display: flex !important;'); // Hiển thị bình luận
    } else {
        comment.setAttribute('style', 'display: none !important;'); // Ẩn bình luận
    }
});

        // Cập nhật trạng thái nút phân trang
        document.querySelectorAll('.page-item').forEach((item) => {
            item.classList.remove('active');
        });
        const activePage = document.querySelector(`.page-item[data-page="${page}"]`);
        if (activePage) activePage.classList.add('active');

        
    }

    // Hàm tạo nút phân trang
    function createPagination() {
        pagination.innerHTML = ''; // Xóa nút cũ nếu có
        if (totalPages > 1) {
            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.className = 'page-item';
                li.setAttribute('data-page', i);
                li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                li.addEventListener('click', (e) => {
                    e.preventDefault();
                    showCommentsPage(i); // Hiển thị bình luận theo trang
                });
                pagination.appendChild(li);
            }
        }
    }
    const scrollBtn = document.getElementById('scrollToTop');
  
  if (scrollBtn) {
    window.onscroll = function() {
      try {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
          scrollBtn.classList.remove('d-none');
          scrollBtn.classList.add('d-block');
        } else {
          scrollBtn.classList.add('d-none');
          scrollBtn.classList.remove('d-block');
        }
      } catch (error) {
        console.error('Scroll handler error:', error);
      }
    };

    scrollBtn.addEventListener('click', function() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    });
  }

    // Khởi tạo
    if (comments.length > 0) {
        createPagination();
        showCommentsPage(1); // Hiển thị trang đầu tiên
    }


  const chatButton = document.getElementById('chatButton');
    const chatContainer = document.getElementById('chatContainer');
    const chatMessages = document.getElementById('chatMessages');
    const chatInput = document.getElementById('chatInput');
    const sendMessageButton = document.getElementById('sendMessage');
    const aricle_Id = '{{this.article.id}}'; 
        async function initializeChatbot() {
        try {
            const response = await fetch('/chatbot/loadArticle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: aricle_Id }) // Your article ID
            });
            
            if (!response.ok) {
                throw new Error('Failed to load article data');
            }

            // Enable chat interface after data is loaded
            chatButton.disabled = false;
            chatInput.disabled = false;
            sendMessageButton.disabled = false;
        } catch (error) {
            console.error('Initialization error:', error);
            const errorMessage = document.createElement('div');
            errorMessage.classList.add('bot-message', 'error');
            errorMessage.textContent = 'Failed to initialize chatbot. Please refresh the page.';
            chatMessages.appendChild(errorMessage);
        }
    }

    // Call initialization on page load
    window.addEventListener('load', initializeChatbot);

  // Create reusable send message function
  async function sendMessage() {
    const message = chatInput.value.trim();

    if (message) {
      // Display user message
      const userMessage = document.createElement('div');
      userMessage.classList.add('user-message');
      userMessage.textContent = `You: ${message}`;
      chatMessages.appendChild(userMessage);

      try {
        // Show loading state
        const loadingMessage = document.createElement('div');
        loadingMessage.classList.add('bot-message', 'loading');
        loadingMessage.textContent = 'Bot is typing...';
        chatMessages.appendChild(loadingMessage);

        // Call API
        const response = await fetch('/chatbot/ask', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ question: message }),
        });

        const data = await response.json();

        // Remove loading message
        chatMessages.removeChild(loadingMessage);

        // Display bot response
        const botMessage = document.createElement('div');
        botMessage.classList.add('bot-message');
        botMessage.textContent = `Bot: ${data.answer || 'Sorry, I could not understand that.'}`;
        chatMessages.appendChild(botMessage);
      } catch (error) {
        // Display error message
        const errorMessage = document.createElement('div');
        errorMessage.classList.add('bot-message', 'error');
        errorMessage.textContent = 'Bot: Sorry, an error occurred. Please try again later.';
        chatMessages.appendChild(errorMessage);
      }

      // Clear input and scroll
      chatInput.value = '';
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  }

  // Add event listeners
  chatButton.addEventListener('click', () => {
    chatContainer.style.display = 
      chatContainer.style.display === 'none' || chatContainer.style.display === '' 
        ? 'flex' 
        : 'none';
  });

  sendMessageButton.addEventListener('click', sendMessage);

  chatInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      sendMessage();
    }
  });
});

document.getElementById('postButton').addEventListener('click', async function() {

  const content = document.getElementById('noteInput').value.trim();
    const article_id = '{{this.article.id}}';
    const user_id = '{{this.authUser.id}}';

    console.log(content, article_id, user_id);

    if (!content) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please write a comment'
        });
        return;
    }

    if (!user_id || !article_id) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'User or Article not found'
        });
        return;
    }

    try {
        const response = await fetch('/read/comment/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                content,
                article_id,
                user_id
            })
        });

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Comment posted successfully'
            }).then(() => {
                // Reload page to show new comment
                location.reload();
            });
            document.getElementById('noteInput').value = '';
        } else {
            throw new Error('Failed to post comment');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to post comment'
        });
    }
});


    // Initialize chatbot data

</script>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
</body>
</html>